$date
	Tue Oct 11 00:20:34 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$scope module inst1 $end
$var wire 1 ! carregar_data $end
$var wire 1 " clk $end
$var wire 8 # data_ent [7:0] $end
$var wire 1 $ rst $end
$var wire 8 % data_sai [7:0] $end
$var reg 1 & fila_cheia $end
$scope module ff1 $end
$var wire 1 ! carregar_data $end
$var wire 1 " clk $end
$var wire 8 ' d [7:0] $end
$var wire 1 & fila_cheia $end
$var wire 1 $ rst $end
$var reg 8 ( q [7:0] $end
$upscope $end
$scope module ff2 $end
$var wire 1 ! carregar_data $end
$var wire 1 " clk $end
$var wire 8 ) d [7:0] $end
$var wire 1 & fila_cheia $end
$var wire 1 $ rst $end
$var reg 8 * q [7:0] $end
$upscope $end
$scope module ff3 $end
$var wire 1 ! carregar_data $end
$var wire 1 " clk $end
$var wire 8 + d [7:0] $end
$var wire 1 & fila_cheia $end
$var wire 1 $ rst $end
$var reg 8 , q [7:0] $end
$upscope $end
$scope module ff4 $end
$var wire 1 ! carregar_data $end
$var wire 1 " clk $end
$var wire 8 - d [7:0] $end
$var wire 1 & fila_cheia $end
$var wire 1 $ rst $end
$var reg 8 . q [7:0] $end
$upscope $end
$scope module ff5 $end
$var wire 1 ! carregar_data $end
$var wire 1 " clk $end
$var wire 8 / d [7:0] $end
$var wire 1 & fila_cheia $end
$var wire 1 $ rst $end
$var reg 8 0 q [7:0] $end
$upscope $end
$scope module ff6 $end
$var wire 1 ! carregar_data $end
$var wire 1 " clk $end
$var wire 8 1 d [7:0] $end
$var wire 1 & fila_cheia $end
$var wire 1 $ rst $end
$var reg 8 2 q [7:0] $end
$upscope $end
$scope module ff7 $end
$var wire 1 ! carregar_data $end
$var wire 1 " clk $end
$var wire 8 3 d [7:0] $end
$var wire 1 & fila_cheia $end
$var wire 1 $ rst $end
$var reg 8 4 q [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
x&
bx %
1$
bx #
0"
1!
$end
#1
b0 (
b0 )
b0 *
b0 +
b0 ,
b0 -
b0 .
b0 /
b0 0
b0 1
b0 2
b0 3
b0 %
b0 4
1"
#2
0"
b1 #
b1 '
0$
#3
b1 (
b1 )
1"
#4
0"
b10 #
b10 '
#5
b10 (
b10 )
b1 *
b1 +
1"
#6
0"
b11 #
b11 '
#7
b1 ,
b1 -
b10 *
b10 +
b11 (
b11 )
1"
#8
0"
b100 #
b100 '
#9
b100 (
b100 )
b11 *
b11 +
b10 ,
b10 -
b1 .
b1 /
1"
#10
0"
b101 #
b101 '
#11
b1 0
b1 1
b10 .
b10 /
b11 ,
b11 -
b100 *
b100 +
b101 (
b101 )
1"
#12
0"
b110 #
b110 '
#13
b110 (
b110 )
b101 *
b101 +
b100 ,
b100 -
b11 .
b11 /
b10 0
b10 1
b1 2
b1 3
1"
#14
0"
b111 #
b111 '
#15
b1 %
b1 4
b10 2
b10 3
b11 0
b11 1
b100 .
b100 /
b101 ,
b101 -
b110 *
b110 +
b111 (
b111 )
1"
#16
0"
b1000 #
b1000 '
#17
b1000 (
b1000 )
b111 *
b111 +
b110 ,
b110 -
b101 .
b101 /
b100 0
b100 1
b11 2
b11 3
b10 %
b10 4
1"
#18
0"
b1001 #
b1001 '
#19
b11 %
b11 4
b100 2
b100 3
b101 0
b101 1
b110 .
b110 /
b111 ,
b111 -
b1000 *
b1000 +
b1001 (
b1001 )
1"
#20
0"
#21
b1001 *
b1001 +
b1000 ,
b1000 -
b111 .
b111 /
b110 0
b110 1
b101 2
b101 3
b100 %
b100 4
1"
#22
0"
#23
b101 %
b101 4
b110 2
b110 3
b111 0
b111 1
b1000 .
b1000 /
b1001 ,
b1001 -
1"
#24
0"
#25
b1001 .
b1001 /
b1000 0
b1000 1
b111 2
b111 3
b110 %
b110 4
1"
#26
0"
#27
b111 %
b111 4
b1000 2
b1000 3
b1001 0
b1001 1
1"
#28
0"
#29
b1001 2
b1001 3
b1000 %
b1000 4
1"
#30
0"
#31
b1001 %
b1001 4
1"
#32
0"
#33
1"
#34
0"
#35
1"
#36
0"
#37
1"
#38
0"
#39
1"
#40
0"
#41
1"
#42
0"
#43
1"
#44
0"
#45
1"
#46
0"
#47
1"
#48
0"
#49
1"
#50
0"
